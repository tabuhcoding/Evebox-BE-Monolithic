import { Injectable, Logger } from '@nestjs/common';
import { VectorStoreService } from '../vector_store/vector_store.service';
import { ChatGoogleGenerativeAI } from '@langchain/google-genai';
import { PromptTemplate } from '@langchain/core/prompts';
import { Document } from 'langchain/document';
import { GEMINI_API_KEY, COHERE_API_KEY } from 'src/shared/utils/rag/key.containts';
import { ChatCohere } from 'src/shared/utils/rag/cohere.chat';

type RAGState = {
  question: string;
  context?: Document[];
  answer?: string;
  nextPrompt?: string;
};
type ChatProvider = 'gemini' | 'cohere';

@Injectable()
export class RAGService {
  private readonly logger = new Logger(RAGService.name);
  private readonly COLLECTION_NAME = 'eveboxEvents';
  private readonly PROVIDERS: { provider: ChatProvider; keys: string[] }[] = [
    { provider: 'gemini', keys: GEMINI_API_KEY },
    { provider: 'cohere', keys: COHERE_API_KEY },
  ];
  constructor(private readonly vectorStore: VectorStoreService) {}

  private isQuotaError(err: any): boolean {
    const msg = err?.message?.toLowerCase() || '';
    return msg.includes('quota') || msg.includes('limit') || msg.includes('exceeded') || msg.includes('token');
  }

  private async retrieve(state: RAGState): Promise<Partial<RAGState>> {
    this.logger.log(`üì• [Step: Retrieve] Searching for relevant documents...`);

    const results = await this.vectorStore.searchDocuments(
      state.nextPrompt || state.question,
      this.COLLECTION_NAME,
      10,
    );

    return { context: results };
  }

  private async generate(state: RAGState): Promise<Partial<RAGState>> {
  
    const promptTemplate = PromptTemplate.fromTemplate(`
      B·∫°n l√† tr·ª£ l√Ω AI. D∆∞·ªõi ƒë√¢y l√† c√°c t√†i li·ªáu c√≥ th·ªÉ li√™n quan ƒë·∫øn c√¢u h·ªèi:
      
      K·∫øt qu·∫£ search similarity: {context}
      
      C√¢u h·ªèi g·ªëc: {question}
      
      C√¢u h·ªèi sau khi x·ª≠ l√Ω qua invoke: {nextPrompt}
      
      H√£y tr·∫£ l·ªùi m·ªôt c√°ch ch√≠nh x√°c v√† r√µ r√†ng nh·∫•t d·ª±a tr√™n c√°c t√†i li·ªáu tr√™n, v√¨ sao l·∫°i chuy·ªÉn ƒë·∫øn trang search, k·∫øt qu·∫£ search c√≥ y·∫øu t·ªë g√¨ ƒë·ªÉ ƒë√°p ·ª©ng ƒë∆∞·ª£c.
      H√£y tr·∫£ l·ªùi tr·ª±c ti·∫øp ƒë·ªëi v·ªõi ng∆∞·ªùi h·ªèi.
    `);
  
    const prompt = await promptTemplate.format({
      question: state.question,
      context: state.context?.map(doc => doc.pageContent).join('\n\n') || '',
      nextPrompt: state.nextPrompt || '',
    });
  
    const rawContent = await this.invokeWithRetry(prompt);
  
    // üëáÔ∏è N·∫øu l√† JSON string ki·ªÉu langchain_core, extract content
    let answer: string = rawContent;
    try {
      const parsed = JSON.parse(rawContent);
      if (parsed?.kwargs?.content) {
        answer = parsed.kwargs.content;
      }
    } catch (_) {
      // not JSON, do nothing
    }
  
    return { answer };
  }
  
  private async invokeWithRetry(prompt: string): Promise<string> {
    for (const { provider, keys } of this.PROVIDERS) {
      for (const key of keys) {
        try {
          let content: string;
  
          if (provider === 'gemini') {
            const model = new ChatGoogleGenerativeAI({
              apiKey: key,
              model: 'gemini-1.5-pro',
              maxOutputTokens: 2048,
            });
            const response = await model.invoke(prompt);
            content = typeof response === 'string' ? response : JSON.stringify(response);
          } else if (provider === 'cohere') {
            const model = new ChatCohere(key, 'command-r-plus'); // ho·∫∑c command-a-03-2025
            content = await model.invoke(prompt);
          }
  
          this.logger.log(`‚úÖ ${provider} responded with key index ${keys.indexOf(key) + 1}`);
          return content!;
        } catch (err: any) {
          if (this.isQuotaError(err)) {
            this.logger.warn(`‚ö†Ô∏è ${provider} key quota exceeded. Trying next key...`);
            continue;
          }
  
          this.logger.error(`‚ùå ${provider} invoke failed: ${err.message}`);
          throw err;
        }
      }
    }
  
    throw new Error('‚ùå All API keys exhausted during RAG flow.');
  }

  async askQuestion(nextPrompt: string, originalQuestion: string): Promise<{
    answer: string;
    context?: Document[];
  }> {
    const state: RAGState = { question: originalQuestion, nextPrompt };

    try {
      const retrieved = await this.retrieve(state);
      const generated = await this.generate({ ...state, ...retrieved });

      const answer = generated.answer ?? '‚ùå No answer generated.';
      this.logger.log(`‚úÖ Final answer generated.`);
      return {
        answer,
        context: retrieved.context,
      };
    } catch (error) {
      this.logger.error(`‚ùå RAG flow failed: ${error.message}`);
      throw error;
    }
  }
}
