import { Injectable, Logger } from '@nestjs/common';
import { VectorStoreService } from '../vector_store/vector_store.service';
import { ChatGoogleGenerativeAI } from '@langchain/google-genai';
import { PromptTemplate } from '@langchain/core/prompts';
import { Document } from 'langchain/document';
import { GEMINI_API_KEY, COHERE_API_KEY } from 'src/shared/utils/rag/key.containts';
import { ChatCohere } from 'src/shared/utils/rag/cohere.chat';
import { CreateEventDto } from './descriptionGenerate.dto';
import { transformEventsDtoToQuery } from 'src/shared/utils/rag/transform_documents';
import { console } from 'inspector';

type DGState = {
  question: string;
  context?: Document[];
  answer?: string;
};
type ChatProvider = 'gemini' | 'cohere';

@Injectable()
export class DescriptionGenerateService {
  private readonly logger = new Logger(DescriptionGenerateService.name);
  private readonly COLLECTION_NAME = 'eveboxEventsDescription';
  private readonly PROVIDERS: { provider: ChatProvider; keys: string[] }[] = [
    { provider: 'gemini', keys: GEMINI_API_KEY },
    { provider: 'cohere', keys: COHERE_API_KEY },
  ];
  constructor(private readonly vectorStore: VectorStoreService) {}

  private isQuotaError(err: any): boolean {
    const msg = err?.message?.toLowerCase() || '';
    return msg.includes('quota') || msg.includes('limit') || msg.includes('exceeded') || msg.includes('token');
  }

  private async retrieve(state: DGState): Promise<Partial<DGState>> {
    this.logger.log(`üì• [Step: Retrieve] Searching for relevant documents...`);

    const results = await this.vectorStore.searchDocuments(
      state.question,
      this.COLLECTION_NAME,
      15,
    );

    return { context: results };
  }

  private async generate(state: DGState, description: string): Promise<Partial<DGState>> {
  
    const promptTemplate = PromptTemplate.fromTemplate(`
      B·∫°n l√† tr·ª£ l√Ω AI. D∆∞·ªõi ƒë√¢y l√† c√°c t√†i li·ªáu c√≥ th·ªÉ li√™n quan ƒë·∫øn c√¢u h·ªèi:
      
      K·∫øt qu·∫£ search similarity: {context}
      
      C√°c th√¥ng tin th√™m li√™n quan ƒë·∫øn s·ª± ki·ªán n·∫øu ng∆∞·ªùi d√πng c√≥ cung c·∫•p: {description}

      C√°c th√¥ng tin v·ªÅ s·ª± ki·ªán c·ªßa ng∆∞·ªùi d√πng: {information}
            
      ·ªû 15 k·∫øt qu·∫£ search similarity tr√™n ch√≠nh l√† 15 description c·ªßa c√°c s·ª± ki·ªán c√≥ li√™n quan ƒë·∫øn ng∆∞·ªùi d√πng.
      T·ª´ 15 description ƒë√≥, k·∫øt h·ª£p v·ªõi th√¥ng tin v·ªÅ s·ª± ki·ªán c·ªßa ng∆∞·ªùi d√πng v√† c√°c th√¥ng tin th√™m, h√£y t·∫°o ra m·ªôt m√¥ t·∫£ m·ªõi, chi ti·∫øt v√† h·∫•p d·∫´n h∆°n cho s·ª± ki·ªán c·ªßa ng∆∞·ªùi d√πng, theo html format.
      N·∫øu c√≥ c√°c field m√† b·∫°n c·∫£m th·∫•y n√≥ h·ªØu √≠ch, ho·∫∑c m·ªôt s·ªë n∆°i n√™n th√™m h√¨nh ·∫£nh, nh∆∞ng b·∫°n kh√¥ng th·ªÉ t·ª± generate ƒë∆∞·ª£c, h√£y ƒë·ªÉ l·∫°i m·ªôt placeholder v·ªõi k√≠ hi·ªáu ki·ªÉu {{ H√£y ƒëi·ªÅn ... ·ªü ƒë√¢y }}, thay ... b·∫±ng t√™n c·ªßa field m√† b·∫°n mu·ªën th√™m v√†o.
      C√°c tr∆∞·ªùng th√¥ng tin kh√¥ng c·∫ßn thi·∫øt: Ng√†y t·ªï ch·ª©c, ng√†y b·∫Øt ƒë·∫ßu, ng√†y k·∫øt th√∫c, ng√†y b√°n v√©, ƒê∆∞·ªùng d·∫´n mua v√©, ƒê∆∞·ªùng d·∫´n s·ª± ki·ªán, Video
      
      H√£y ch·∫Øc ch·∫Øn r·∫±ng m√¥ t·∫£ m·ªõi n√†y kh√¥ng gi·ªëng v·ªõi b·∫•t k·ª≥ m√¥ t·∫£ n√†o trong 15 k·∫øt qu·∫£ search similarity.
      Ch·ªâ tr·∫£ v·ªÅ n·ªôi dung m√¥ t·∫£ m·ªõi m√† kh√¥ng c·∫ßn th√™m b·∫•t k·ª≥ th√¥ng tin n√†o kh√°c.
      M·ªói s·ª± ki·ªán ƒë·ªÅu n√™n c·∫ßn c√≥ m√¥ t·∫£ chi ti·∫øt v·ªÅ n·ªôi dung, th√™m √≠t nh·∫•t l√† 1, 2 h√¨nh ·∫£nh, ...
      C·∫©n th·∫≠n v·ªõi c√°c k√≠ hi·ªáu, kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ th·ª´a ho·∫∑c thi·∫øu b·∫•t k·ª≥ k√≠ hi·ªáu n√†o.
    `);
  
    const prompt = await promptTemplate.format({
      context: state.context?.map(doc => doc.pageContent).join('\n\n') || '',
      description: description,
      information: state.question,
    });
  
    const rawContent = await this.invokeWithRetry(prompt);

    console.log(rawContent);
  
    // üëáÔ∏è N·∫øu l√† JSON string ki·ªÉu langchain_core, extract content
    let answer: string = rawContent;
    try {
      const parsed = JSON.parse(rawContent);
      if (parsed?.kwargs?.content) {
        answer = parsed.kwargs.content;
      }
    } catch (_) {
      // not JSON, do nothing
    }
  
    return { answer };
  }
  
  private async invokeWithRetry(prompt: string): Promise<string> {
    for (const { provider, keys } of this.PROVIDERS) {
      for (const key of keys) {
        try {
          let content: string;
  
          if (provider === 'gemini') {
            const model = new ChatGoogleGenerativeAI({
              apiKey: key,
              model: 'gemini-1.5-pro',
              maxOutputTokens: 2048,
            });
            const response = await model.invoke(prompt);
            content = typeof response === 'string' ? response : JSON.stringify(response);
          } else if (provider === 'cohere') {
            const model = new ChatCohere(key, 'command-r-plus'); // ho·∫∑c command-a-03-2025
            content = await model.invoke(prompt);
          }
  
          this.logger.log(`‚úÖ ${provider} responded with key index ${keys.indexOf(key) + 1}`);
          return content!;
        } catch (err: any) {
          if (this.isQuotaError(err)) {
            this.logger.warn(`‚ö†Ô∏è ${provider} key quota exceeded. Trying next key...`);
            continue;
          }
  
          this.logger.error(`‚ùå ${provider} invoke failed: ${err.message}`);
          throw err;
        }
      }
    }
  
    throw new Error('‚ùå All API keys exhausted during RAG flow.');
  }

  async askQuestion(dto: CreateEventDto): Promise<{
    answer: string;
  }> {
    const question = transformEventsDtoToQuery(dto);
    const state: DGState = { question: question };

    try {
      const retrieved = await this.retrieve(state);
      const generated = await this.generate({ ...state, ...retrieved }, dto.description);

      const answer = generated.answer ?? '‚ùå No answer generated.';
      this.logger.log(`‚úÖ Final answer generated.`);
      return {
        answer,
      };
    } catch (error) {
      this.logger.error(`‚ùå RAG flow failed: ${error.message}`);
      throw error;
    }
  }
}
