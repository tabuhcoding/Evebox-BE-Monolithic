generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Service

enum OTPType {
  FORGOT_PASSWORD
  REGISTER
}

enum ItemType {
  EVENT
  ORG
}

model Role {
  id        Int    @id
  role_name String @db.VarChar(50)
  users     User[]

  @@map("role")
}

model User {
  id                    String                  @id @db.VarChar(255)
  name                  String                  @db.VarChar(255)
  email                 String                  @unique @db.VarChar(255)
  phone                 String                  @db.VarChar(10)
  password              String                  @db.VarChar(255)
  role_id               Int?
  created_at            DateTime                @default(now())
  refreshTokens         RefreshToken[]
  role                  Role?                   @relation(fields: [role_id], references: [id])
  favoriteNotiHistory   FavoriteNotiHistory[]   @relation("UserFavoriteHistory")

  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  revoked   Boolean  @default(false)
  expiresAt DateTime
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Otp {
  id           String   @id
  email        String
  otp          String
  type         OTPType
  expiresAt    DateTime
  isUsed       Boolean  @default(false)
  createdAt    DateTime @default(now())
  attempts     Int
  requestToken String   @unique

  @@index([email])
  @@index([otp])
  @@map("otps")
}

model Images {
  id         Int      @id @default(autoincrement())
  userId     String?  @default("TicketBox")
  imageUrl   String   @db.VarChar(255)
}

model FavoriteNotiHistory {
  id          String   @id @default(uuid())
  userId      String
  itemType    ItemType
  orgId       String?
  eventId     Int?
  isFavorite  Boolean
  isNotified  Boolean

  user        User       @relation("UserFavoriteHistory", fields: [userId], references: [id])
}

// Payment Service
enum PaymentMethod {
  PAYOS
  MOMO
}

model PayOSInfo {
  orderCode     Int      @unique
  bin           String?  @db.VarChar(20)
  accountNumber String?  @db.VarChar(50)
  accountName   String?  @db.VarChar(100)
  amount        Int
  description   String?  @db.VarChar(100)
  currency      String?  @db.VarChar(10)
  paymentLinkId String?  @db.VarChar(50)
  status        String?  @db.VarChar(20)
  checkoutUrl   String?
  qrCode        String?
  createdAt     DateTime @default(now())
  expiredAt     String?
}

model PaymentInfo {
  id          Int           @id @default(autoincrement())
  method      PaymentMethod
  paymentCode Int
  paidAt      DateTime?
  orderId String?
}

model PaymentMethodStatus {
  paymentMethod PaymentMethod @unique
  status        Boolean       @default(false)
}

// Booking Service
enum BookingTicketType{
  PHYSICAL_TICKET
  E_TICKET
}

enum BookingTicketStatus{
  CANCEL
  SUCCESS
  PENDING
}

model Order {
  id             String         @id @default(uuid())
  showingId      String
  formResponseId Int?
  type           BookingTicketType
  price          Int
  totalPrice     Int
  userId         String
  quantity       Int?
  seatId         Int[]
  status         BookingTicketStatus
  mailSent       Boolean        @default(false)
  paymentId      Int?
  voucherCodeId  String?
  Ticket         Ticket[]
}

model Ticket {
  id           String  @id @default(uuid())
  qrCode       String?
  description  String
  seatId       Int?
  orderId      String
  ticketTypeId String?
  isCheckedIn  Boolean @default(false)
  checkedBy    String  @default("")
  Order        Order   @relation(fields: [orderId], references: [id])
}

// Event Service

// Event Service - location

model Province {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  created_at   DateTime       @default(now())
  districts    districts[]

  @@map("province")
}

model districts {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(100)
  provinceId Int
  createdAt  DateTime    @default(now())
  province   Province    @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  locations  locations[]
}

model locations {
  id         Int       @id @default(autoincrement())
  street     String    @db.VarChar(255)
  ward       String    @db.VarChar(100)
  districtId Int
  createdAt  DateTime  @default(now())
  Events     Events[]
  districts  districts @relation(fields: [districtId], references: [id], onDelete: Cascade)
}

// Event Service - Form

model Form {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  createdAt    DateTime       @default(now())
  createdBy    String?
  deleteAt     DateTime?
  FormInput    FormInput[]
  FormResponse FormResponse[]
  Showing      Showing[]
}

model FormAnswer {
  id             Int          @id @default(autoincrement())
  formResponseId Int
  formInputId    Int
  value          String?
  FormInput      FormInput    @relation(fields: [formInputId], references: [id], onDelete: Cascade)
  FormResponse   FormResponse @relation(fields: [formResponseId], references: [id], onDelete: Cascade)
}

model FormInput {
  id         Int          @id @default(autoincrement())
  formId     Int
  fieldName  String       @db.VarChar(255)
  type       String       @db.VarChar(50)
  required   Boolean      @default(true)
  regex      String?
  options    Json?
  deleteAt   DateTime?
  FormAnswer FormAnswer[]
  Form       Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model FormResponse {
  id         Int          @id @default(autoincrement())
  formId     Int
  createdAt  DateTime     @default(now())
  userId     String
  showingId  String?
  FormAnswer FormAnswer[]
  Form       Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  Showing    Showing?     @relation(fields: [showingId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [email], onDelete: Cascade)
}

// Event Service - Seat map
enum SeatStatusEnum {
  NOTSALE
  AVAILABLE
  SOLD
  INCACHE
  ESOLD
}

model Row {
  id        Int      @id @default(autoincrement())
  name      String
  sectionId Int
  createdAt DateTime @default(now())
  Section   Section  @relation(fields: [sectionId], references: [id])
  Seat      Seat[]
}

model Seat {
  id         Int          @id @default(autoincrement())
  name       String
  rowId      Int
  positionX  Float
  positionY  Float
  createdAt  DateTime     @default(now())
  position   Int
  Row        Row          @relation(fields: [rowId], references: [id])
  SeatStatus SeatStatus[]
}

model Section {
  id              Int                 @id @default(autoincrement())
  name            String
  seatmapId       Int
  isStage         Boolean
  element         Json
  attribute       Json
  createdAt       DateTime            @default(now())
  isReservingSeat Boolean             @default(false)
  Row             Row[]
  Seatmap         Seatmap             @relation(fields: [seatmapId], references: [id])
  ticketTypes     TicketTypeSection[]
}

model Seatmap {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  viewBox   String
  status    Int
  Section   Section[]
  Showing   Showing[]
}

model SeatStatus {
  id        String  @id @default(uuid())
  showingId String
  status    SeatStatusEnum
  seatId    Int
  seatMapId Int
  Seat      Seat    @relation(fields: [seatId], references: [id])
  Showing   Showing @relation(fields: [showingId], references: [id])
}

model TicketTypeSection {
  ticketTypeId String
  sectionId    Int
  Section      Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  TicketType   TicketType @relation(fields: [ticketTypeId], references: [id], onDelete: Cascade)

  @@id([ticketTypeId, sectionId])
}

// Event Service - Voucher
enum DiscountType {
  PERCENTAGE
  VALUE
}

enum CreatorRole {
  ADMIN
  ORG
}

model VoucherCampaign {
  id             String       @id @default(uuid())
  name           String       
  createdBy      String       
  creatorRole    CreatorRole  // 'ADMIN' hoặc 'ORG'
  organizerId    String?      
  discountType   DiscountType
  discountValue  Int
  validFrom      DateTime
  validTo        DateTime
  eventId        Int[]         // Nếu null thì áp dụng toàn hệ thống
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  codes          VoucherCode[]
}

model VoucherCode {
  id               String          @id @default(uuid())
  campaignId       String
  code             String          
  isPublic         Boolean         @default(true)
  maxUsage         Int             @default(0)
  maxUsagePerUser  Int             @default(0)

  campaign         VoucherCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  targets          VoucherTargetUser[]
}

model VoucherTargetUser {
  id            String       @id @default(uuid())
  voucherCodeId String
  userId        String       @db.VarChar(255)

  voucherCode   VoucherCode  @relation(fields: [voucherCodeId], references: [id], onDelete: Cascade)
}

// Event Service - Event
enum TicketTypeStatus {
  SOLD_OUT
  REGISTER_NOW
  BOOK_NOW
  REGISTER_CLOSED
  SALE_CLOSED
  NOT_OPEN
}

model Categories {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  createdAt       DateTime          @default(now())
  EventCategories EventCategories[]
}

model EventCategories {
  id         Int        @id @default(autoincrement())
  eventId    Int
  categoryId Int
  isSpecial  Boolean    @default(false)
  Categories Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Events     Events     @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Events {
  id                                Int                     @id @default(autoincrement())
  title                             String                  @db.VarChar(255)
  description                       String?
  organizerId                       String?
  locationId                        Int?
  imgLogoUrl                        String?
  imgPosterUrl                      String?
  createdAt                         DateTime                @default(now())
  isOnlyOnEve                       Boolean                 @default(false)
  isSpecial                         Boolean                 @default(false)
  lastScore                         Decimal                 @db.Decimal(10, 2)
  totalClicks                       Int                     @default(0)
  weekClicks                        Int                     @default(0)
  venue                             String?                 @db.VarChar(100)
  isApproved                        Boolean                 @default(false)
  orgDescription                    String?
  orgName                           String?
  deleteAt                          DateTime?
  isOnline                          Boolean                 @default(false)
  EventCategories                   EventCategories[]
  locations                         locations?              @relation(fields: [locationId], references: [id], onDelete: Cascade)
  Showing                           Showing[]
  eventUserRelationships            EventUserRelationship[]
  UserClickHistory UserClickHistory[]
}

model Showing {
  id                    String         @id @default(uuid())
  eventId               Int
  isFree                Boolean
  isSalable             Boolean
  isPresale             Boolean
  seatMapId             Int
  startTime             DateTime
  endTime               DateTime
  isEnabledQueueWaiting Boolean
  showAllSeats          Boolean
  formId                Int?
  deleteAt              DateTime?
  FormResponse          FormResponse[]
  SeatStatus            SeatStatus[]
  Events                Events         @relation(fields: [eventId], references: [id])
  Form                  Form?          @relation(fields: [formId], references: [id])
  Seatmap               Seatmap        @relation(fields: [seatMapId], references: [id])
  TicketType            TicketType[]
}

model TicketType {
  id             String              @id @default(uuid())
  showingId      String
  status         TicketTypeStatus
  name           String
  description    String
  color          String
  isFree         Boolean
  price          Int
  originalPrice  Int
  startTime      DateTime
  endTime        DateTime
  position       Int
  imageUrl       String
  maxQtyPerOrder Int
  minQtyPerOrder Int
  isHidden       Boolean             @default(false)
  quantity       Int?                @default(0)
  deleteAt       DateTime?
  Showing        Showing             @relation(fields: [showingId], references: [id])
  sections       TicketTypeSection[]
}

// Event Service - Management

model OrgPaymentInfor {
  id            String   @id @default(uuid())
  organizerId   String
  accountName   String
  accountNumber String
  bankName      String
  branch        String
  businessType  Int
  fullName      String?
  address       String?
  taxCode       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted     Boolean  @default(false)

  @@map("org_payment_infor")
}



model EventUserRelationship {
  eventId   Int
  userId    String
  email     String
  role      Int?
  role_desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  event Events @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventRole  EventRole?  @relation("EventRoleToEventUserRelationship", fields: [role], references: [id])

  @@id([eventId, userId])
}

model EventRole {
  id           Int    @id
  isEdited     Boolean
  isSummarized Boolean
  viewVoucher  Boolean
  marketing    Boolean
  viewOrder    Boolean
  viewSeatmap  Boolean
  viewMember   Boolean
  checkin      Boolean
  checkout     Boolean
  redeem       Boolean

  userRoles    EventUserRelationship[]  @relation("EventRoleToEventUserRelationship")

  @@map("event_role")
}


model UserClickHistory {
  id      String   @id @default(uuid())
  eventId Int
  userId  String   // can be a real user ID or random UUID
  date    DateTime @default(now())

  event Events @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("user_click_history")
}
